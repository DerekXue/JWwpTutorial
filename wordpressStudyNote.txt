0.every plugin should have header and meta data

1.wordpress class three stage:
	1.1 activation
	1.2 deactivation
	1.3 uninstall

2.wordpress class hook which match these three stage:
	2.1 register_activation_hook
	

3.customer post type(CPT) setup
	3.1 flush_rewrite_rules(); 

4. enqueue style and script
	4.1 php function call : obj -> func()

5. php obj function by default is public
	5.1 protected function: accessable inside the class itself ,but not accessable by the instantiated object
	5.2 private function:can be access by the class itself , not even it's sub class

6. static can put infront of public , private modifier
	6.1 but if call static method which has $this inside will trigger error ,because $this need use in object context , 
	and for build-in functions instead of using $this , use the 'className' instead
	6.2 static cann be called by object also

7. inc folder means files and subfolder relates to PHP Methods and PHP classes
	7.1 typically split and store static functions , helper class like activation and deactivation into inc folder
_____
9. php how to access inner method within class array($this, 'settings_link')

10. composer is the package manager for wordpress,composer.json is same as package.json , 
    vendor folder is generated by composer
    namespace can replace require_once function

12. add init inside inc folder , modify init class using final modifier , so that is not inheritable.
    when static function want to call member inside of class , use self
    creat const : define('CONST_NAME',value)
       

_____________________________
wordpress built in method:
	1.register_activation_hook
	2.register_deactivation_hook
	3.add_menu_page
	4.add_action
	5.wp_enqueue_style
	6.wp_enqueue_script
	7.plugin_dir_path
wordpress built in field:
	1.admin_menu
	2.admin_enqueue_scripts
...
So the inbuilt stuff always use the underscore_ naming convension



